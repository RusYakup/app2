 
name: CI/CD
env:
       PROJECT_ID     : ${{ secrets.GKE_PROJECT }}
       GCP_PROJECT: My Project 48180
       GCP_SERVICE: app-go-service2
       GCP_REGION: us-central1
# Controls when the workflow will run
on:
  push:
    paths-ignore:
      - '*.md'
      - '.github/workflows/**'
    branches: [ main ]
  pull_request:
    paths-ignore:
      - '*.md'
      - '.github/workflows/**'
    branches: [ main ]

jobs:
  pylint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with pylint
      run: |
        pylint --exit-zero $(ls -R | grep .py$ | xargs)
  
  pytest:
    needs: pylint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
  
  bandit_test:
    
    runs-on: ubuntu-latest
  
    needs: pytest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: analyze source code with bandit
      run: |
        bandit -c bandit.yml -s B104 -r .
        
#######

  deploy:
    name: Deploy
    needs: bandit_test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ GKE_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t gcr.io/${{ env.GCP_PROJECT }}/${{ env.GCP_SERVICE }}:latest .
          docker push gcr.io/${{ env.GCP_PROJECT }}/${{ env.GCP_SERVICE }}:latest
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.4.0
        with:
          service: ${{ env.GCP_SERVICE }}
          image: gcr.io/${{ env.GCP_PROJECT }}/${{ env.GCP_SERVICE }}:latest
          region: ${{ env.GCP_REGION }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Cleanup untagged images
        run: gcloud container images list-tags gcr.io/${{ env.GCP_PROJECT }}/${{ env.GCP_SERVICE }} --filter='-tags:*' --format="get(digest)" --limit=10 > tags && while read p; do gcloud container images delete "gcr.io/${{ env.GCP_PROJECT }}/${{ env.GCP_SERVICE }}@$p" --quiet; done < tags

    

 
